apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
//apply plugin: 'signing'

repositories {
    jcenter()
    jcenter {
        url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'
    }
    mavenCentral()
}

dependencies {
    // Use JUnit and mockito test framework
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:2.28.0'
    implementation 'org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:1.0.2'
    implementation 'com.microsoft.graph:microsoft-graph-core:[1.0.0, 2.0.0)'
    implementation 'com.microsoft.graph:microsoft-graph:[2.0.0, 3.0.0)'
}

def pomConfig = {
    licenses {
        license([:]) {
            name "MIT License"
            url "http://opensource.org/licenses/MIT"
            distribution "repo"
        }
    }
}

//Publishing tasks-
//Maven Central Snapshot: publishSnapshotPublicationToMavenRepository
//Maven Central Release: publishMavenCentralReleasePublicationToMaven2Repository
//Bintray Snapshot: publishSnapshotPublicationToMaven3Repository
//Bintray Release: uploadArchives

publishing {

    publications {

        maven(MavenPublication) {

            groupId 'com.microsoft.graph'

            artifactId 'microsoft-graph-auth'

            version "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}${mavenArtifactSuffix}"

            from components.java

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Microsoft Graph Auth SDK for Java')
                root.appendNode('url', 'https://github.com/microsoftgraph/msgraph-sdk-java-auth')
                root.children().last() + pomConfig
                def pomFile = file("${project.buildDir}/libs/microsoft-graph-auth.pom")
                writeTo(pomFile)
            }

        }
        Snapshot(MavenPublication) {
            customizePom(pom)
            groupId 'com.microsoft.graph'
            artifactId 'microsoft-graph-auth'
            version "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}${mavenCentralSnapshotArtifactSuffix}"
            from components.java
            afterEvaluate {
                artifact sourceJar
                artifact javadocJar
            }
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
            }
//        	artifact(sourceJar) {
//        		classifier = 'sources'
//        	}
//        	artifact(javadocJar) {
//        		classifier = 'javadoc'
//        	}
        }

    }
    repositories {
        maven {
            url = project.property('printixSnapshotsUrl')

            credentials {
                if (project.rootProject.file('local.properties').exists()) {
                    Properties properties = new Properties()
                    properties.load(project.rootProject.file('local.properties').newDataInputStream())
                    username = properties.getProperty('artifactoryUsername')
                    password = properties.getProperty('artifactoryPassword')
                }
            }
        }

    }

}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

//task javadocJar(type: Jar) {
//    classifier = 'javadoc'
//    from sourceSets.main.allJava
//}

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

def getVersionCode() {
    return mavenMajorVersion.toInteger() * 10000 + mavenMinorVersion.toInteger() * 100 + mavenPatchVersion.toInteger()
}

def getVersionName() {
    return "${mavenMajorVersion}.${mavenMinorVersion}.${mavenPatchVersion}${mavenArtifactSuffix}"
}

uploadArchives {

    def bintrayUsername = ""

    def bintrayApikey = ""

    if (project.rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        bintrayUsername = properties.getProperty('bintray.user')
        bintrayApikey = properties.getProperty('bintray.apikey')
    }

    configuration = configurations.archives

    repositories.mavenDeployer {

        pom {
            setGroupId project.mavenGroupId
            setArtifactId project.mavenArtifactId
            setVersion getVersionName()
        }

        repository(url: project.mavenRepoUrl) {
            url = url + "/" + getVersionName()

            authentication(
                    // put these values in local file ~/.gradle/gradle.properties
                    userName: project.hasProperty("bintrayUsername") ? project.bintrayUsername : bintrayUsername,
                    password: project.hasProperty("bintrayApikey") ? project.bintrayApikey : bintrayApikey
            )
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

//signing {
//    sign configurations.archives
//}
//tasks.withType(Sign)*.enabled = mavenCentralPublishingEnabled.toBoolean()

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Microsoft Graph SDK Auth'
            name 'Microsoft Graph Java SDK Auth'
            url 'https://github.com/microsoftgraph/msgraph-sdk-java-auth'
            organization {
                name 'Microsoft'
                url 'https://github.com/microsoftgraph/msgraph-sdk-java-auth'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/microsoftgraph/msgraph-sdk-java-auth/issues'
            }
            licenses {
                license {
                    name "MIT License"
                    url "http://opensource.org/licenses/MIT"
                    distribution "repo"
                }
            }
            scm {
                url 'https://github.com/microsoftgraph/msgraph-sdk-java-auth'
                connection 'scm:git:git://github.com/microsoftgraph/msgraph-sdk-java-auth.git'
                developerConnection 'scm:git:ssh://git@github.com:microsoftgraph/msgraph-sdk-java-auth.git'
            }
            developers {
                developer {
                    name 'Microsoft'
                }
            }
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if (project.rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        tasks.withType(Sign)*.enabled = (properties.containsKey('enableSigning')) ? properties.getProperty('enableSigning').toBoolean() : false
        allprojects { ext."signing.keyId" = properties.getProperty('signing.keyId') }
        allprojects { ext."signing.secretKeyRingFile" = properties.getProperty('signing.secretKeyRingFile') }
        allprojects { ext."signing.password" = properties.getProperty('signing.password') }
    }
}

//model {
//    tasks.generatePomFileForMavenCentralReleasePublication {
//        destination = file("$buildDir/generated-pom.xml")
//    }
//
//    tasks.publishMavenCentralReleasePublicationToMaven2Repository {
//        dependsOn project.tasks.signArchives
//    }
//}
